#!/bin/bash

# Script to automate triggering OWASP ZAP DAST scans.
# This script is primarily a trigger; ZAP itself performs the scan.
# CI/CD pipelines would typically handle waiting for scan completion and report parsing/archiving.

# Configuration
# TARGET_URL: The URL of the application to scan.
#             Can be set via environment variable ZAP_TARGET_URL or defaults if not set.
TARGET_URL="${ZAP_TARGET_URL:-http://localhost:8069}" # Default to a common local Odoo instance

# ZAP_API_KEY: API key for ZAP if ZAP is running as a daemon and API access is secured.
#              IMPORTANT: This should be sourced from a secure store (e.g., CI/CD secrets)
#              and not hardcoded here. This is a placeholder.
ZAP_API_KEY_PLACEHOLDER="YOUR_ZAP_API_KEY_IF_NEEDED"

# REPORT_NAME: Name for the ZAP report.
REPORT_NAME="zap_scan_report_$(date +%Y%m%d_%H%M%S).html"
REPORT_DIR="${WORKSPACE:-./reports/zap_reports}" # Default report directory, can be overridden by WORKSPACE env var

# CONTEXT_FILE_PATH: Path to a ZAP context file. Context files can define scope,
#                    authentication details, users, etc. This is an example path.
#                    The context file should be present at this path within the Docker container
#                    or on the machine running ZAP.
CONTEXT_FILE_PATH_IN_CONTAINER="/zap/wrk/zap_context.context" # Example path inside Docker
LOCAL_CONTEXT_FILE_PATH="${WORKSPACE:-.}/tests/security/config/zap_context.context" # Example local path to be mounted

# POLICY_NAME: Name of the scan policy to use in ZAP.
#              This policy must be pre-configured in ZAP if not a default one.
POLICY_NAME="InfluenceGenScanPolicy" # Example: a custom policy

# ZAP Docker image
ZAP_DOCKER_IMAGE="owasp/zap2docker-stable"

# Ensure report directory exists
mkdir -p "$REPORT_DIR"

echo "======================================================================"
echo " Starting OWASP ZAP DAST Scan"
echo "======================================================================"
echo " Target URL: $TARGET_URL"
echo " Report will be generated in: $REPORT_DIR/$REPORT_NAME"
if [ -f "$LOCAL_CONTEXT_FILE_PATH" ]; then
  echo " Using Context File: $LOCAL_CONTEXT_FILE_PATH (mounted as $CONTEXT_FILE_PATH_IN_CONTAINER)"
else
  echo " Context File not found at $LOCAL_CONTEXT_FILE_PATH, proceeding without specific context file for baseline scan."
fi
echo " Scan Policy (if applicable and ZAP configured): $POLICY_NAME"
echo "======================================================================"

# Option 1: Using ZAP Baseline Scan (Good for CI/CD, quick scan)
# This scan does not perform active attacks by default beyond basic spidering.
echo "Running ZAP Baseline Scan..."
# docker run --rm \
#   -v "$REPORT_DIR:/zap/wrk/:rw" \
#   -v "$LOCAL_CONTEXT_FILE_PATH:$CONTEXT_FILE_PATH_IN_CONTAINER:ro" \ # Mount context file if it exists
#   -t "$ZAP_DOCKER_IMAGE" zap-baseline.py \
#   -t "$TARGET_URL" \
#   -r "$REPORT_NAME" \
#   -c "$CONTEXT_FILE_PATH_IN_CONTAINER" # Reference context file if used

# For a scan that includes a context file and is more likely to be used with -c:
if [ -f "$LOCAL_CONTEXT_FILE_PATH" ]; then
  docker run --rm \
    -v "$REPORT_DIR:/zap/wrk/:rw" \
    -v "$LOCAL_CONTEXT_FILE_PATH:$CONTEXT_FILE_PATH_IN_CONTAINER:ro" \
    -t "$ZAP_DOCKER_IMAGE" zap-baseline.py \
    -t "$TARGET_URL" \
    -r "$REPORT_NAME" \
    -c "$CONTEXT_FILE_PATH_IN_CONTAINER"
else
  docker run --rm \
    -v "$REPORT_DIR:/zap/wrk/:rw" \
    -t "$ZAP_DOCKER_IMAGE" zap-baseline.py \
    -t "$TARGET_URL" \
    -r "$REPORT_NAME"
fi


# Option 2: Using ZAP Full Scan (More comprehensive, takes longer, more resource-intensive)
# This requires ZAP to be running, potentially as a daemon, or uses the zap-full-scan.py script.
# echo "Triggering ZAP Full Scan (example - ensure ZAP daemon is running or adapt script)..."
# docker run --rm \
#   -v "$REPORT_DIR:/zap/wrk/:rw" \
#   -v "$LOCAL_CONTEXT_FILE_PATH:$CONTEXT_FILE_PATH_IN_CONTAINER:ro" \
#   -t "$ZAP_DOCKER_IMAGE" zap-full-scan.py \
#   -t "$TARGET_URL" \
#   -r "$REPORT_NAME" \
#   -c "$CONTEXT_FILE_PATH_IN_CONTAINER" \
#   -P "$POLICY_NAME" # Policy might be more relevant for full scans

# Option 3: Using ZAP API directly if ZAP is running as a daemon (e.g., on http://localhost:8080)
# This provides more granular control over the scan process.
# This part is conceptual and would require ZAP to be running independently.
#
# ZAP_DAEMON_ADDRESS="http://localhost:8080" # Example if ZAP daemon is running locally
#
# echo "Spidering target via ZAP API..."
# curl "${ZAP_DAEMON_ADDRESS}/JSON/spider/action/scan/?apikey=${ZAP_API_KEY_PLACEHOLDER}&url=${TARGET_URL}&contextName=MyContextNameFromContextFile"
#
# # Wait for spider to complete - this needs a polling mechanism
# # ...
#
# echo "Starting Active Scan via ZAP API..."
# curl "${ZAP_DAEMON_ADDRESS}/JSON/ascan/action/scan/?apikey=${ZAP_API_KEY_PLACEHOLDER}&url=${TARGET_URL}&recurse=true&inScopeOnly=true&scanPolicyName=${POLICY_NAME}&contextId=YOUR_CONTEXT_ID"
#
# # Wait for active scan to complete - this needs a polling mechanism
# # ...
#
# echo "Generating report via ZAP API..."
# curl "${ZAP_DAEMON_ADDRESS}/OTHER/core/other/htmlreport/?apikey=${ZAP_API_KEY_PLACEHOLDER}" > "${REPORT_DIR}/${REPORT_NAME}"

echo "======================================================================"
if [ $? -eq 0 ]; then
  echo "ZAP Scan initiated (or completed for baseline). Report might be available at: ${REPORT_DIR}/${REPORT_NAME}"
  echo "Please check ZAP UI or Docker logs for detailed progress and results."
else
  echo "ZAP Scan script encountered an error. Check Docker logs or script output."
fi
echo "======================================================================"

# Requirement REQ-SEC-VULN-001 is addressed by automating the triggering of this DAST scan.
# The effectiveness depends on ZAP's configuration, rules, and the scan type used.

exit 0