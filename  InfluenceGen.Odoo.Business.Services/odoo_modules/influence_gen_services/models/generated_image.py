import hashlib
import json
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class InfluenceGenGeneratedImage(models.Model):
    _name = 'influence_gen.generated_image'
    _description = "AI Generated Image"
    _order = 'create_date desc'

    request_id = fields.Many2one(
        'influence_gen.ai_image_generation_request',
        string="Source Request",
        required=True,
        ondelete='cascade',
        index=True
    )
    user_id = fields.Many2one(related='request_id.user_id', string="Generated By User", store=True, readonly=True, index=True)
    influencer_profile_id = fields.Many2one(
        related='request_id.influencer_profile_id',
        string="Generated For Influencer",
        store=True,
        readonly=True,
        index=True
    )
    campaign_id = fields.Many2one(related='request_id.campaign_id', string="Associated Campaign", store=True, readonly=True, index=True)
    storage_attachment_id = fields.Many2one('ir.attachment', string="Image File Attachment", required=True, ondelete='restrict')
    name = fields.Char(string="Image Name/Title", related='storage_attachment_id.name', readonly=False, store=True) # SDS said readonly=False
    file_format = fields.Char(string="File Format", compute='_compute_file_details', store=True)
    file_size = fields.Integer(string="File Size (bytes)", compute='_compute_file_details', store=True)
    width = fields.Integer(string="Width (px)", related='request_id.resolution_width', store=True, readonly=True)
    height = fields.Integer(string="Height (px)", related='request_id.resolution_height', store=True, readonly=True)
    hash_value = fields.Char(string="Image Hash (SHA256)", index=True, readonly=True)
    retention_category = fields.Selection([
        # Example categories, to be defined based on actual needs / policy model
        ('personal_standard', 'Personal - Standard Retention'),
        ('personal_extended', 'Personal - Extended Retention'),
        ('campaign_active', 'Campaign - Active Usage'),
        ('campaign_archival', 'Campaign - Archival'),
        ('legal_hold', 'Legal Hold')
        # Add more specific categories based on DataRetentionPolicy model's data_category or new ones
    ], string="Retention Category", required=True, index=True)
    usage_rights_details = fields.Text(string="Specific Usage Rights Applied", compute='_compute_usage_rights', store=True)
    is_submitted_to_campaign = fields.Boolean(
        string="Submitted to Campaign?",
        compute='_compute_is_submitted_to_campaign',
        store=True
    )

    @api.depends('storage_attachment_id.mimetype', 'storage_attachment_id.file_size')
    def _compute_file_details(self):
        for record in self:
            if record.storage_attachment_id:
                record.file_format = record.storage_attachment_id.mimetype
                record.file_size = record.storage_attachment_id.file_size
            else:
                record.file_format = False
                record.file_size = 0

    @api.model
    def create_from_generation(cls, request_id_val, attachment_id_val, image_binary_data):
        if not request_id_val or not attachment_id_val or not image_binary_data:
            raise ValidationError(_("Request ID, Attachment ID, and image binary data are required."))

        request_record = cls.env['influence_gen.ai_image_generation_request'].browse(request_id_val)
        if not request_record.exists():
            raise ValidationError(_("Source AI Generation Request not found."))

        attachment_record = cls.env['ir.attachment'].browse(attachment_id_val)
        if not attachment_record.exists():
            raise ValidationError(_("Image Attachment not found."))

        # Calculate hash
        hash_sha256 = hashlib.sha256()
        hash_sha256.update(image_binary_data)
        image_hash = hash_sha256.hexdigest()

        # Determine retention category
        retention_cat = 'personal_standard' # Default
        if request_record.intended_use == 'campaign_specific' and request_record.campaign_id:
            # More complex logic might be needed based on campaign usage rights duration
            # e.g., if campaign_id.usage_rights_duration_months > 12: retention_cat = 'campaign_extended'
            retention_cat = 'campaign_active' # Example
        # This should align with DataRetentionPolicy definitions

        vals = {
            'request_id': request_id_val,
            'storage_attachment_id': attachment_id_val,
            'hash_value': image_hash,
            'retention_category': retention_cat,
            # width, height, name, file_format, file_size are computed or related
        }
        image_record = cls.create(vals)

        cls.env['influence_gen.audit_log_entry'].create_log(
            event_type='AI_GENERATED_IMAGE_CREATED',
            actor_user_id=request_record.user_id.id,
            action_performed='CREATE',
            target_object=image_record,
            details_dict={
                'request_id': request_id_val,
                'attachment_id': attachment_id_val,
                'hash': image_hash,
                'retention_category': retention_cat
            }
        )
        request_record._log_usage(event_type="generation_success", details={'image_id': image_record.id})
        return image_record

    @api.depends('request_id.campaign_id.usage_rights_description', 'request_id.intended_use')
    def _compute_usage_rights(self):
        for record in self:
            if record.request_id.intended_use == 'campaign_specific' and record.request_id.campaign_id:
                record.usage_rights_details = record.request_id.campaign_id.usage_rights_description
            else:
                # Default platform policy for personal use
                default_policy = self.env['influence_gen.platform_setting'].get_param(
                    'influence_gen.ai_image_personal_use_policy_text',
                    default="For personal, non-commercial use only."
                )
                record.usage_rights_details = default_policy
    
    @api.depends('id') # Recompute if a content submission links to this image
    def _compute_is_submitted_to_campaign(self):
        for record in self:
            submission_count = self.env['influence_gen.content_submission'].search_count(
                [('generated_image_id', '=', record.id)]
            )
            record.is_submitted_to_campaign = submission_count > 0

    def action_apply_retention_policy(self):
        # This method would be called by DataManagementService or a scheduled job.
        # It should check its creation_date against its retention_category's policy.
        self.ensure_one()
        policy = self.env['influence_gen.data_retention_policy'].get_active_policy(
            data_category=self.retention_category # Assuming retention_category maps to data_category
        )
        if not policy: # Or if policy.model_name != self._name
            return False # No applicable policy

        # Simplified logic:
        # expiration_date = self.create_date + relativedelta(days=policy.retention_period_days)
        # if fields.Date.today() > expiration_date:
        #     if policy.disposition_action == 'delete':
        #         self.storage_attachment_id.unlink() # Unlink attachment first
        #         self.unlink()
        #     elif policy.disposition_action == 'anonymize': # Not typical for images
        #         pass
        #     elif policy.disposition_action == 'archive':
        #         # self.active = False # or trigger infra layer archival
        #         pass
        #     self.env['influence_gen.audit_log_entry'].create_log(...)
        # return True

        # Actual implementation requires DataManagementService to iterate and call this
        # or for this to be a placeholder for the service's direct action on the record.
        _logger.info(f"Placeholder: Applying retention policy for image {self.id} with category {self.retention_category}")
        return False