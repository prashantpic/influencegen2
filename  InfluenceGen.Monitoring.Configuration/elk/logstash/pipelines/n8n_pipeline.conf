# Purpose: Logstash pipeline for N8N logs.
# (REQ-12-001, REQ-12-002, REQ-ATEL-001, REQ-ATEL-002, REQ-ATEL-004, REQ-ATEL-010)

input {
  beats {
    port => 5045 # Use a different port for N8N beats
    # Add SSL/TLS if needed
  }
  # N8N often logs JSON to stdout/stderr, collected by Docker/Kubernetes logging drivers,
  # which Filebeat can pick up. Input configuration needs to match collection method.
}

filter {
  # Filter for logs originating from Filebeat on N8N hosts
  if [fields][app_name] == "n8n" or [agent][name] =~ "filebeat.*n8n" {
    # N8N often logs in JSON format
    json {
      source => "message"
      target => "n8n_log" # Parse JSON into a nested field
      remove_field => ["message"]
    }

    # Mutate and rename fields from the parsed JSON
    mutate {
      add_field => { "app_name" => "n8n" }
      # Rename common fields (adjust based on actual N8N JSON log structure)
      # rename => { "[n8n_log][timestamp]" => "log_timestamp" }
      # rename => { "[n8n_log][level]" => "loglevel" }
      # rename => { "[n8n_log][message]" => "message" } # Keep the core message field
    }

    # Date filter for N8N timestamp (adjust field name if renamed)
    # date {
    #   match => [ "[n8n_log][timestamp]", "ISO8601" ] # Assuming ISO8601
    #   target => "@timestamp"
    #   timezone => "UTC" # Ensure UTC
    # }
    # If no explicit timestamp in N8N logs, @timestamp will be ingestion time, may need adjustment or rely on Beats timestamp.

    # Extract specific N8N fields and map/rename
    mutate {
      # Example: extract workflow/execution IDs if they exist in the JSON
      # add_field => { "n8n.workflow_id" => "%{[n8n_log][workflowId]}" }
      # add_field => { "n8n.execution_id" => "%{[n8n_log][executionId]}" }
      # add_field => { "n8n.node_name" => "%{[n8n_log][nodeName]}" }
      # Add correlation_id handling if present in logs
      # if [n8n_log][correlation_id] { mutate { add_field => { "trace.id" => "%{[n8n_log][correlation_id]}" } } }
    }

    # Map loglevel to ECS (adjust field name if renamed)
    # if [loglevel] {
    #   mutate {
    #     lowercase => [ "loglevel" ]
    #     rename => { "loglevel" => "log.level" }
    #   }
    # }
    # Assuming N8N log level is at [n8n_log][level]
    if [n8n_log][level] {
       mutate {
         lowercase => [ "[n8n_log][level]" ]
         rename => { "[n8n_log][level]" => "log.level" }
       }
    }
    # Keep original message if it wasn't removed
    if ![message] and [n8n_log][message] { mutate { rename => { "[n8n_log][message]" => "message" } } }


  } else {
    # Drop logs not tagged as N8N
    drop {}
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"] # Elasticsearch service name and port
    index => "influencegen-n8n-logs-%{+YYYY.MM.dd}" # Dynamic index name
    user => "${ES_USER}" # Injected
    password => "${ES_PASSWORD}" # Injected
    # manage_template => false
    # ssl => true
    # ssl_certificate_verification => true
    # cacert => "/etc/logstash/certs/ca.crt"
  }
  # stdout { codec => rubydebug } # For debugging
}