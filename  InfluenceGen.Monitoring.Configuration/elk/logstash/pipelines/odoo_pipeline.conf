# Purpose: Logstash pipeline for Odoo logs.
# (REQ-12-001, REQ-12-002, REQ-ATEL-001, REQ-ATEL-002, REQ-ATEL-004)

input {
  beats {
    port => 5044
    # Add SSL/TLS if needed
  }
  # Alternatively, configure syslog or file input depending on Odoo logging setup
}

filter {
  # Filter for logs originating from Filebeat on Odoo hosts
  if [fields][app_name] == "odoo" or [agent][name] =~ "filebeat.*odoo" {
    # Use custom grok patterns for Odoo format
    grok {
      match => { "message" => "%{ODOO_LOG_LINE}" }
      patterns_dir => "/usr/share/logstash/patterns" # Points to where influencegen_patterns is located
      tag_on_failure => ["_grokparsefailure_odoo"]
    }

    # Mutate and rename fields
    mutate {
      rename => { "odoo_timestamp" => "log_timestamp" }
      add_field => { "app_name" => "odoo" }
      # Add correlation_id extraction if present in Odoo logs
      # grok { match => { "message" => "correlation_id=%{DATA:correlation_id}" } add_tag => ["correlation_extracted"] }
      # if "correlation_extracted" in [tags] { mutate { add_field => { "trace.id" => "%{correlation_id}" } } }
    }

    # Date filter to parse Odoo's timestamp and set @timestamp (assume ISO8601 from Odoo_LOG_LINE)
    date {
      match => [ "log_timestamp", "ISO8601" ]
      target => "@timestamp"
      timezone => "UTC" # Ensure UTC
    }

    # Clean up temporary fields
    mutate {
       remove_field => ["odoo_timestamp", "pid"] # Example fields from ODOO_LOG_LINE pattern
    }

    # Map loglevel to ECS
    if [loglevel] {
      mutate {
        lowercase => [ "loglevel" ]
        rename => { "loglevel" => "log.level" }
      }
    }

  } else {
    # Drop logs not tagged as Odoo if this input receives other logs
    drop {}
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"] # Elasticsearch service name and port
    index => "influencegen-odoo-logs-%{+YYYY.MM.dd}" # Dynamic index name
    user => "${ES_USER}" # Injected from environment/secrets
    password => "${ES_PASSWORD}" # Injected from environment/secrets
    # manage_template => false # Assume templates are managed externally (Kibana, file, etc.)
    # ssl => true # Enable SSL/TLS in production
    # ssl_certificate_verification => true
    # cacert => "/etc/logstash/certs/ca.crt"
  }
  # stdout { codec => rubydebug } # For debugging
}