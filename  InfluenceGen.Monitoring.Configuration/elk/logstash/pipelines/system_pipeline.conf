# Purpose: Logstash pipeline for system logs (syslog, kernel, etc.).
# (REQ-12-001, REQ-12-002, REQ-ATEL-001, REQ-ATEL-002, REQ-ATEL-004)

input {
  syslog {
    port => 5050
    codec => plain { charset => "UTF-8" }
  }
  beats {
    port => 5046 # Separate port for system logs from Filebeat/Metricbeat
    # Add SSL/TLS if needed
  }
}

filter {
  # Filter for logs tagged as system or from specific beats
  if [fields][app_name] == "system" or [agent][name] =~ "filebeat.*system" or [agent][name] =~ "metricbeat.*system" {

    # Basic syslog parsing
    if [program] and [message] {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYMULTILINE:syslog_message}" }
        overwrite => [ "message" ]
        tag_on_failure => ["_grokparsefailure_syslog"]
      }
       mutate {
         rename => { "syslog_message" => "message" }
         rename => { "syslog_hostname" => "host.name" }
         rename => { "syslog_program" => "process.program" }
         rename => { "syslog_pid" => "process.pid" }
       }
    }

    mutate {
      add_field => { "app_name" => "system" }
      # Ensure host.name is captured from beats or syslog
      add_field => { "host.name" => "%{[host][name]}" }
    }

    # Date filter for syslog timestamp (adjust if using beats @timestamp)
    if [syslog_timestamp] {
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM d HH:mm:ss" ] # Add other syslog formats if needed
        target => "@timestamp"
        timezone => "UTC" # Ensure UTC
      }
      mutate { remove_field => ["syslog_timestamp"] }
    }

    # Map loglevel to ECS (syslog severity)
    if [syslog_severity_code] {
       ruby {
         code => "
           levels = ['emerg', 'alert', 'crit', 'err', 'warning', 'notice', 'info', 'debug']
           event.set('[log][level]', levels[event.get('syslog_severity_code')])
         "
       }
    } else if [log][level] {
       mutate { lowercase => [ "[log][level]" ] } # Assume log level is already present from some beats modules
    }


  } else {
    # Drop logs not tagged as system
    drop {}
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"] # Elasticsearch service name and port
    index => "influencegen-system-logs-%{+YYYY.MM.dd}" # Dynamic index name
    user => "${ES_USER}" # Injected
    password => "${ES_PASSWORD}" # Injected
    # manage_template => false
    # ssl => true
    # ssl_certificate_verification => true
    # cacert => "/etc/logstash/certs/ca.crt"
  }
  # stdout { codec => rubydebug } # For debugging
}